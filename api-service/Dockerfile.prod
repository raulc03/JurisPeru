# Multi-stage build para reducir tamaño final
FROM python:3.13-slim AS builder

# Instalar dependencias del sistema necesarias para compilación
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Instalar poetry
RUN pip install --no-cache-dir poetry

# Configurar poetry para no crear virtualenv y instalar en /usr/local
RUN poetry config virtualenvs.create false

WORKDIR /app

# Copiar lib_utils PRIMERO (necesario para resolver la dependencia local)
COPY lib_utils/src ./lib_utils/src
COPY lib_utils/pyproject.toml ./lib_utils/


# Copiar archivos de dependencias
COPY api-service/pyproject.toml api-service/poetry.lock ./backend/
WORKDIR /app/backend

# Instalar dependencias directamente con poetry (resuelve dependencias locales)
RUN poetry install --only main --no-root --no-directory

# Copiar código fuente y hacer instalación final
COPY api-service/src ./src
COPY api-service/config.yaml ./
RUN poetry install --only main

# Etapa final - imagen más ligera
FROM python:3.13-slim

# Instalar solo dependencias runtime necesarias
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Crear usuario no-root por seguridad
RUN useradd --create-home --shell /bin/bash app

# Copiar dependencias instaladas desde builder
COPY --from=builder /usr/local/lib/python3.13/site-packages /usr/local/lib/python3.13/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Variables de entorno para optimizar Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app/src \
    HF_HOME=/app/.cache/huggingface

WORKDIR /app

# Crear directorio de cache y configurar permisos
RUN mkdir -p /app/.cache/huggingface /app/logs && \
    chown -R app:app /app/.cache /app/logs

# Cambiar a usuario no-root para descargar modelo
USER app

# Cachear modelo durante build (como usuario app)
RUN python -c "from sentence_transformers import SentenceTransformer; print('Descargando modelo...'); model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2'); print('Modelo cacheado exitosamente')"

# Copiar código fuente (después del cache del modelo para mejor layering)
COPY --chown=app:app lib_utils/src ./lib_utils/src
COPY --chown=app:app lib_utils/pyproject.toml ./lib_utils/
COPY --chown=app:app api-service/src ./src  
COPY --chown=app:app api-service/config.yaml ./

# Limpiar archivos temporales de Python
RUN find /home/app/.local -type d -name __pycache__ -exec rm -rf {} + || true && \
    find /home/app/.local -type f -name "*.pyc" -delete || true

EXPOSE 8000

ENV TRANSFORMERS_OFFLINE=1

# Usar exec form para mejor handling de señales
WORKDIR /app/src
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
